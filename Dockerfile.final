# Single-stage build for BassNotion monorepo - ensures all dependencies are available
FROM node:20-alpine

WORKDIR /app

# Copy package files for dependency installation
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/backend/package.json ./apps/backend/
COPY libs/contracts/package.json ./libs/contracts/

# Install pnpm
RUN npm install -g pnpm

# Install ALL dependencies in workspace context
RUN pnpm install --frozen-lockfile

# CRITICAL FIX: Find and link the actual packages from .pnpm store
RUN echo "=== Finding actual packages in .pnpm store ===" && \
    find node_modules/.pnpm -name "@nestjs" -type d | head -5 && \
    echo "=== Creating correct symlinks ===" && \
    mkdir -p node_modules/@nestjs && \
    NESTJS_CORE_PATH=$(find node_modules/.pnpm -path "*/node_modules/@nestjs/core" | head -1) && \
    NESTJS_COMMON_PATH=$(find node_modules/.pnpm -path "*/node_modules/@nestjs/common" | head -1) && \
    NESTJS_CONFIG_PATH=$(find node_modules/.pnpm -path "*/node_modules/@nestjs/config" | head -1) && \
    NESTJS_CQRS_PATH=$(find node_modules/.pnpm -path "*/node_modules/@nestjs/cqrs" | head -1) && \
    NESTJS_FASTIFY_PATH=$(find node_modules/.pnpm -path "*/node_modules/@nestjs/platform-fastify" | head -1) && \
    REFLECT_METADATA_PATH=$(find node_modules/.pnpm -path "*/node_modules/reflect-metadata" | head -1) && \
    echo "Found paths:" && \
    echo "CORE: $NESTJS_CORE_PATH" && \
    echo "COMMON: $NESTJS_COMMON_PATH" && \
    echo "REFLECT: $REFLECT_METADATA_PATH" && \
    ln -sf "../../$NESTJS_CORE_PATH" node_modules/@nestjs/core && \
    ln -sf "../../$NESTJS_COMMON_PATH" node_modules/@nestjs/common && \
    ln -sf "../../$NESTJS_CONFIG_PATH" node_modules/@nestjs/config && \
    ln -sf "../../$NESTJS_CQRS_PATH" node_modules/@nestjs/cqrs && \
    ln -sf "../../$NESTJS_FASTIFY_PATH" node_modules/@nestjs/platform-fastify && \
    ln -sf "../$REFLECT_METADATA_PATH" node_modules/reflect-metadata && \
    echo "=== Verifying symlinks ===" && \
    ls -la node_modules/@nestjs/ && \
    ls -la node_modules/reflect-metadata && \
    echo "=== Testing imports ===" && \
    node -e "console.log('Testing @nestjs/core...'); import('@nestjs/core').then(() => console.log('✅ @nestjs/core SUCCESS')).catch(e => console.log('❌ @nestjs/core ERROR:', e.message))" && \
    node -e "console.log('Testing reflect-metadata...'); import('reflect-metadata').then(() => console.log('✅ reflect-metadata SUCCESS')).catch(e => console.log('❌ reflect-metadata ERROR:', e.message))"

# Copy source code
COPY . .

# Create necessary directories for Nx
RUN mkdir -p /app/tmp /app/.nx/cache

# Set Nx environment variables
ENV NX_DAEMON=false
ENV NX_CACHE_DIRECTORY=/app/.nx/cache
ENV NX_CLOUD_ACCESS_TOKEN=""

# Build contracts and backend
RUN npx nx build contracts --configuration=production
RUN npx nx build backend --configuration=production

# Final verification - this should work now!
RUN echo "=== FINAL CHECK - @nestjs should be available ===" && \
    ls -la node_modules/@nestjs/ && \
    echo "=== SUCCESS: NestJS packages are now available! ===" 

# Environment variables
ENV NODE_ENV=production

# Expose port
EXPOSE 3000

# Start the application with extensive debugging
CMD ["sh", "-c", "echo '=== CONTAINER STARTUP DEBUG ===' && echo 'PWD:' && pwd && echo 'PORT=$PORT' && echo 'NODE_ENV=$NODE_ENV' && echo 'Checking if main.js exists:' && ls -la dist/apps/backend/src/main.js && echo 'Testing node version:' && node --version && echo 'Testing @nestjs/core import:' && node -e \"import('@nestjs/core').then(() => console.log('✅ @nestjs/core import SUCCESS')).catch(e => console.log('❌ @nestjs/core import FAILED:', e.message))\" && echo 'Starting NestJS application...' && node dist/apps/backend/src/main.js"] 