# Multi-stage build for BassNotion monorepo
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files for dependency installation
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/backend/package.json ./apps/backend/
COPY libs/contracts/package.json ./libs/contracts/

# Install pnpm
RUN npm install -g pnpm

# Install ALL dependencies in workspace context
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Set Nx environment variables for better Docker compatibility
ENV NX_DAEMON=false
ENV NX_CACHE_DIRECTORY=/tmp/.nx/cache
ENV NX_CLOUD_ACCESS_TOKEN=""

# Create cache directory
RUN mkdir -p /tmp/.nx/cache

# Build contracts library first
RUN pnpm nx build @bassnotion/contracts

# Verify contracts build output
RUN echo "=== Contracts build verification ===" && \
    ls -la libs/contracts/dist/ && \
    echo "=== Contracts package.json ===" && \
    cat libs/contracts/package.json

# Create contracts library as proper npm module AND ensure path mapping works
RUN mkdir -p node_modules/@bassnotion/contracts && \
    cp -r libs/contracts/dist/* node_modules/@bassnotion/contracts/ && \
    cp libs/contracts/package.json node_modules/@bassnotion/contracts/ && \
    echo "=== Verifying node_modules contracts ===" && \
    ls -la node_modules/@bassnotion/contracts/

# Build backend using the correct Nx syntax
RUN pnpm nx run @bassnotion/backend:build:production --verbose

# Production stage
FROM node:20-alpine AS production

WORKDIR /app

# Copy built application and dependencies
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Environment variables
ENV NODE_ENV=production

# Expose port
EXPOSE 3000

# Start the application
CMD ["node", "dist/apps/backend/main.js"] 