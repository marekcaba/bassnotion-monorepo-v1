# Multi-stage build for BassNotion monorepo
FROM node:20-alpine AS builder
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/backend/package.json ./apps/backend/package.json
COPY libs/contracts/package.json ./libs/contracts/package.json

# Install pnpm and dependencies
RUN npm install -g pnpm
RUN pnpm install --frozen-lockfile --shamefully-hoist

# Install backend-specific dependencies explicitly with hoisting
RUN cd apps/backend && pnpm install --frozen-lockfile --shamefully-hoist

# Copy source code
COPY . .

# Disable Nx Cloud and daemon to avoid authentication issues
ENV NX_CLOUD_NO_TIMEOUTS=true
ENV NX_CLOUD_AUTH=false
ENV NX_DAEMON=false

# Build contracts library first
RUN pnpm nx build @bassnotion/contracts

# Make sure contracts are freshly built with correct structure
RUN cd libs/contracts && rm -rf dist tsconfig.tsbuildinfo && npm run build

# Debug: Check what hoisting created and manually ensure contracts are available
RUN echo "=== Checking hoisted node_modules ===" && \
    ls -la node_modules/@bassnotion/ || echo "No @bassnotion in hoisted node_modules" && \
    echo "=== Ensuring contracts are available for TypeScript ===" && \
    mkdir -p node_modules/@bassnotion/contracts && \
    cp -r libs/contracts/dist/* node_modules/@bassnotion/contracts/ 2>/dev/null || true && \
    cp libs/contracts/package.json node_modules/@bassnotion/contracts/ 2>/dev/null || true && \
    ls -la node_modules/@bassnotion/contracts/

# Build backend (hoisting already handled contracts placement)
RUN pnpm nx build @bassnotion/backend --prod

# Production stage
FROM node:20-alpine AS production
WORKDIR /app

# Copy built application and working node_modules from builder
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Copy the simple health server for testing
COPY --from=builder /app/apps/backend/src/health.js ./health.js

EXPOSE 3000

# Debug: Check what files exist and test the command
RUN echo "=== Production stage debugging ===" && \
    ls -la dist/apps/backend/ && \
    echo "=== Checking main.js file ===" && \
    ls -la dist/apps/backend/src/main.js && \
    echo "=== Testing node command ===" && \
    node --version && \
    echo "=== Files in dist ===" && \
    find dist/ -name "*.js" | grep main && \
    echo "=== Testing simple health server ===" && \
    ls -la health.js && \
    echo "=== Testing health.js syntax ===" && \
    node -c health.js && \
    echo "=== Checking NestJS dependencies ===" && \
    ls -la node_modules/@nestjs/ && \
    echo "=== Testing health.js startup (5 second test) ===" && \
    timeout 5 node health.js || echo "Health server test completed"

# Switch back to the full NestJS application
CMD ["node", "dist/apps/backend/src/main.js"] 